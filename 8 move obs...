public class EightMovePaths {

    public static int countPaths(int[][] grid, boolean[][] visited, int i, int j, int m, int n) {
        
        if (i < 0 || j < 0 || i >= m || j >= n) return 0;

       
        if (grid[i][j] == 0 || visited[i][j]) return 0;

        
        if (i == m - 1 && j == n - 1) return 1;

       
        visited[i][j] = true;

        int totalPaths = 0;

        
        totalPaths += countPaths(grid, visited, i - 1, j);     // Up
        totalPaths += countPaths(grid, visited, i + 1, j);     // Down
        totalPaths += countPaths(grid, visited, i, j - 1);     // Left
        totalPaths += countPaths(grid, visited, i, j + 1);     // Right
        totalPaths += countPaths(grid, visited, i - 1, j - 1); // Up-Left
        totalPaths += countPaths(grid, visited, i - 1, j + 1); // Up-Right
        totalPaths += countPaths(grid, visited, i + 1, j - 1); // Down-Left
        totalPaths += countPaths(grid, visited, i + 1, j + 1); // Down-Right

       
        visited[i][j] = false;

        return totalPaths;
    }

    public static void main(String[] args) {
        int[][] grid = {
            {1, 1, 1},
            {1, 0, 1},
            {1, 1, 1}
        };

        int m = grid.length;
        int n = grid[0].length;
        boolean[][] visited = new boolean[m][n];

        int totalPaths = countPaths(grid, visited, 0, 0, m, n);
        System.out.println("Total valid paths with 8 moves: " + totalPaths);
    }
}
